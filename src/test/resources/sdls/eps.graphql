type Expert {
  corpId: ID!
  metadata:Metadata
  profile:Profile
}

type Metadata {
  applicantId: String
  gender: String
  startDate:String
  endDate:String
  hireType:String
  managerCorpId: String
  intuitManagerEmail: String
  intuitManagerName: String
  intuitManager: String
  agentStatus:String
  firstName: String!
  middleName: String
  lastName: String!
  suffixName: String
  prefixName: String
  personalEmail: String
  businessUnit:String
  partnerName:String
  companyIds:[String]
  workFromHome:Boolean
  addresses: [Address]
  phoneNumbers:[Phone]
  litmosComplete:Boolean
}

type Profile {
  prefFirstName: String
  prefLastName: String
  workEmail: String
  credentials: [Credential]
  skills: Skills
  experiences:[Experience]
  locations: [Location]
  photo: ProfilePhoto
  version: Int
}

type Phone {
  number: String!
  type: String
  countryCode: String
}

type Credential {
  credentialType: String
  credentialId: String
  credentialName: String
  credentialDate: String
  credentialExpirationDate:String
}

type Experience {
  experienceCategory: String
  yearsOfExperience:Int
}

type Skills {
  areasOfExpertise:[String]
  areasOfExpertiseListOfStates:[String]
  domains:[String]
  languages:[String]
}

type Location {
  locationType: String
  city: String
  state: String
  zip: Int
}

type Address {
  addressType: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  country: String
}

type ProfilePhoto {
  primary:Photo
  addlPhotos:[Photo]
}

type Photo {
  uri:String
  isModerated:Boolean
}

# INPUTs
input ProfileInput {
  prefFirstName: String
  prefLastName: String
  workEmail: String
  credentials: [CredentialInput]
  skills: SkillsInput
  experiences:[ExperienceInput]
  locations: [LocationInput]
  photo: ProfilePhotoInput
  version: Int!
}

input ProfilePhotoInput {
  uri:String
  isModerated:Boolean
}

input MetadataInput {
  applicantId: String
  gender: String
  startDate:String
  endDate:String
  hireType:String
  managerCorpId: String
  intuitManagerEmail: String
  intuitManagerName: String
  intuitManager: String
  agentStatus:String
  firstName: String!
  middleName: String
  lastName: String!
  suffixName: String
  prefixName: String
  personalEmail: String
  businessUnit:String
  partnerName:String
  companyIds:[String]
  workFromHome:Boolean
  addresses: [AddressInput]
  phoneNumbers:[PhoneInput]
  litmosComplete:Boolean
}

input PhoneInput {
  number: String!
  type: String!
  countryCode: String!
}

input CredentialInput {
  credentialType: String
  credentialId: String
  credentialName: String
  credentialDate: String
  credentialExpirationDate:String
}

input ExperienceInput {
  experienceCategory: String
  yearsOfExperience:Int
}

input SkillsInput {
  areasOfExpertise:[String]
  areasOfExpertiseListOfStates:[String]
  domains:[String]
  languages:[String]
}

input LocationInput {
  locationType: String
  city: String
  state: String
  zip: Int
}

input AddressInput {
  addressType: String!
  address1: String!
  address2: String!
  city: String!
  state: String!
  zip: String!
  country: String!
}

# The Root Query for the application
type Query {
  Profile(corpId: ID!): Profile!
  #ExpertDetails(corpId: ID!): Expert!
  #searchProfile(corpId: ID!): Profile!
}

schema {
  query: Query
  mutation: Mutation
}

# The Root Mutation for the application
type Mutation {
  upsertProfile(corpId: ID!, input: ProfileInput!): Profile!
}